{"version":3,"file":"index-DCuWk393.js","sources":["../../src/data/problems.ts","../../src/components/ProblemDisplay.ts","../../src/components/FeedbackDisplay.ts","../../src/main.ts"],"sourcesContent":["import { Problem } from '../types';\n\nexport const PROBLEMS: Problem[] = [\n  {\n    id: \"p1\",\n    difficulty: \"easy\",\n    expression: \"(x + 1)(x + 2)\",\n    correctAnswer: \"x² + 3x + 2\",\n    wrongAnswers: [\"x² + 2x + 2\", \"x² + 3x + 3\"],\n    hint: \"Käytä FOIL-menetelmää: First (ensimmäiset), Outer (ulommat), Inner (sisimmät), Last (viimeiset). Kerro jokainen termi ensimmäisestä sulkeesta jokaisella termillä toisesta.\",\n    explanation: {\n      steps: [\n        { term1: \"x\", term2: \"x\", result: \"x²\", color: \"yellow\", position: 1 },\n        { term1: \"x\", term2: \"2\", result: \"2x\", color: \"cyan\", position: 2 },\n        { term1: \"1\", term2: \"x\", result: \"x\", color: \"purple\", position: 3 },\n        { term1: \"1\", term2: \"2\", result: \"2\", color: \"green\", position: 4 }\n      ],\n      finalSimplification: \"x² + 2x + x + 2 = x² + 3x + 2\"\n    }\n  },\n  {\n    id: \"p2\", \n    difficulty: \"easy\",\n    expression: \"(2x + 1)(x + 3)\",\n    correctAnswer: \"2x² + 7x + 3\",\n    wrongAnswers: [\"2x² + 6x + 3\", \"2x² + 7x + 4\"],\n    hint: \"Aloita FOIL-menetelmällä: (2x)(x) = 2x², sitten (2x)(3) + (1)(x) + (1)(3).\",\n    explanation: {\n      steps: [\n        { term1: \"2x\", term2: \"x\", result: \"2x²\", color: \"yellow\", position: 1 },\n        { term1: \"2x\", term2: \"3\", result: \"6x\", color: \"cyan\", position: 2 },\n        { term1: \"1\", term2: \"x\", result: \"x\", color: \"purple\", position: 3 },\n        { term1: \"1\", term2: \"3\", result: \"3\", color: \"green\", position: 4 }\n      ],\n      finalSimplification: \"2x² + 6x + x + 3 = 2x² + 7x + 3\"\n    }\n  },\n  {\n    id: \"p3\",\n    difficulty: \"easy\", \n    expression: \"(x - 1)(x + 4)\",\n    correctAnswer: \"x² + 3x - 4\",\n    wrongAnswers: [\"x² - 3x - 4\", \"x² + 4x - 4\"],\n    hint: \"Varo etumerkkejä! (-1)(x) = -x ja (-1)(4) = -4. Yhdistä samanlaiset termit lopussa.\",\n    explanation: {\n      steps: [\n        { term1: \"x\", term2: \"x\", result: \"x²\", color: \"yellow\", position: 1 },\n        { term1: \"x\", term2: \"4\", result: \"4x\", color: \"cyan\", position: 2 },\n        { term1: \"-1\", term2: \"x\", result: \"-x\", color: \"purple\", position: 3 },\n        { term1: \"-1\", term2: \"4\", result: \"-4\", color: \"green\", position: 4 }\n      ],\n      finalSimplification: \"x² + 4x - x - 4 = x² + 3x - 4\"\n    }\n  },\n  {\n    id: \"p4\",\n    difficulty: \"medium\",\n    expression: \"(3x - 1)(2x + 4)\",\n    correctAnswer: \"6x² + 10x - 4\", \n    wrongAnswers: [\"6x² + 12x - 4\", \"6x² + 8x - 4\"],\n    hint: \"FOIL suuremmilla luvuilla: (3x)(2x)=6x², (3x)(4)=12x, (-1)(2x)=-2x, (-1)(4)=-4. Sitten yhdistä 12x-2x.\",\n    explanation: {\n      steps: [\n        { term1: \"3x\", term2: \"2x\", result: \"6x²\", color: \"yellow\", position: 1 },\n        { term1: \"3x\", term2: \"4\", result: \"12x\", color: \"cyan\", position: 2 },\n        { term1: \"-1\", term2: \"2x\", result: \"-2x\", color: \"purple\", position: 3 },\n        { term1: \"-1\", term2: \"4\", result: \"-4\", color: \"green\", position: 4 }\n      ],\n      finalSimplification: \"6x² + 12x - 2x - 4 = 6x² + 10x - 4\"\n    }\n  },\n  {\n    id: \"p5\",\n    difficulty: \"medium\",\n    expression: \"(2x + 3)(3x - 2)\",\n    correctAnswer: \"6x² + 5x - 6\",\n    wrongAnswers: [\"6x² + 7x - 6\", \"6x² + 5x - 4\"],\n    hint: \"Ole varovainen etumerkkien kanssa: (2x)(-2)=-4x ja (3)(3x)=9x. Lopulliset x-termit: -4x+9x=5x.\",\n    explanation: {\n      steps: [\n        { term1: \"2x\", term2: \"3x\", result: \"6x²\", color: \"yellow\", position: 1 },\n        { term1: \"2x\", term2: \"-2\", result: \"-4x\", color: \"cyan\", position: 2 },\n        { term1: \"3\", term2: \"3x\", result: \"9x\", color: \"purple\", position: 3 },\n        { term1: \"3\", term2: \"-2\", result: \"-6\", color: \"green\", position: 4 }\n      ],\n      finalSimplification: \"6x² - 4x + 9x - 6 = 6x² + 5x - 6\"\n    }\n  }\n];","import { Problem, GameState } from '../types';\n\nexport function createProblemDisplay(problem: Problem, gameState: GameState): string {\n  const { currentProblemIndex, totalProblems, showHint } = gameState;\n  \n  const allAnswers = [problem.correctAnswer, ...problem.wrongAnswers].sort(() => Math.random() - 0.5);\n  \n  return `\n    <div class=\"ascii-box-double max-w-md mx-auto min-h-screen flex flex-col\">\n      <div class=\"text-center mb-6\">\n        <div class=\"text-terminal-white text-xl mb-2\">THE CIPHER OF LOST PAGES</div>\n        <div class=\"h-px bg-terminal-white mb-4\"></div>\n        <div class=\"text-terminal-gray\">Problem ${currentProblemIndex + 1}/${totalProblems}</div>\n      </div>\n\n      <div class=\"ascii-box-single mb-6 text-center\">\n        <div class=\"text-terminal-gray mb-2\">Kerro auki:</div>\n        <div class=\"text-terminal-white text-lg font-bold\">\n          ${problem.expression} =\n        </div>\n      </div>\n\n      <div class=\"flex-1\">\n        <div class=\"text-terminal-gray mb-4\">Valitse oikea vastaus:</div>\n        \n        <div class=\"space-y-3\" id=\"answer-options\">\n          ${allAnswers.map((answer, index) => `\n            <button \n              class=\"terminal-button w-full text-left p-4 hover:bg-terminal-gray hover:bg-opacity-20\" \n              data-answer=\"${answer}\"\n            >\n              ${String.fromCharCode(65 + index)}) ${answer}\n            </button>\n          `).join('')}\n        </div>\n      </div>\n\n      ${showHint ? `\n        <div class=\"ascii-box-single mb-4 bg-terminal-yellow bg-opacity-10\">\n          <div class=\"text-terminal-yellow text-sm\">\n            💡 Vihje: ${problem.hint}\n          </div>\n        </div>\n      ` : ''}\n\n      <div class=\"flex justify-between items-center mt-6 text-sm\">\n        <button class=\"terminal-button px-4 py-2\" id=\"reset-btn\">reset</button>\n        <button class=\"terminal-button px-4 py-2\" id=\"hint-btn\">${showHint ? 'piilota vihje' : 'vihje ?'}</button>\n      </div>\n    </div>\n  `;\n}","import { Problem, GameState } from '../types';\n\nexport function createFeedbackDisplay(\n  problem: Problem, \n  gameState: GameState, \n  isCorrect: boolean\n): string {\n  const { currentProblemIndex, totalProblems, selectedAnswer, showHint } = gameState;\n  \n  const feedbackColor = isCorrect ? 'terminal-green' : 'terminal-red';\n  const feedbackIcon = isCorrect ? '✅' : '❌';\n  const feedbackText = isCorrect ? 'CORRECT!' : 'WRONG, TRY AGAIN';\n  \n  const allAnswers = [problem.correctAnswer, ...problem.wrongAnswers].sort(() => Math.random() - 0.5);\n  \n  return `\n    <div class=\"ascii-box-double max-w-md mx-auto min-h-screen flex flex-col\">\n      <div class=\"text-center mb-6\">\n        <div class=\"text-terminal-white text-xl mb-2\">THE CIPHER OF LOST PAGES</div>\n        <div class=\"h-px bg-terminal-white mb-4\"></div>\n        <div class=\"text-terminal-gray\">Problem ${currentProblemIndex + 1}/${totalProblems}</div>\n      </div>\n\n      <div class=\"text-center mb-6\">\n        <div class=\"text-${feedbackColor} text-lg font-bold\">\n          ${feedbackIcon} ${feedbackText}\n        </div>\n      </div>\n\n      <div class=\"ascii-box-single mb-6 text-center\">\n        <div class=\"text-terminal-white text-lg font-bold\">\n          ${problem.expression} =\n        </div>\n      </div>\n\n      <div class=\"flex-1\">        \n        <div class=\"space-y-3\" id=\"answer-options\">\n          ${allAnswers.map((answer, index) => {\n            let buttonClass = 'terminal-button w-full text-left p-4';\n            \n            if (answer === selectedAnswer) {\n              if (isCorrect) {\n                buttonClass += ' border-terminal-green bg-terminal-green bg-opacity-10';\n              } else {\n                buttonClass += ' border-terminal-red bg-terminal-red bg-opacity-10';\n              }\n            }\n            \n            return `\n              <button \n                class=\"${buttonClass}\" \n                data-answer=\"${answer}\"\n                ${isCorrect ? 'disabled' : ''}\n              >\n                ${String.fromCharCode(65 + index)}) ${answer}\n              </button>\n            `;\n          }).join('')}\n        </div>\n      </div>\n\n      ${showHint && !isCorrect ? `\n        <div class=\"ascii-box-single mb-4 bg-terminal-yellow bg-opacity-10\">\n          <div class=\"text-terminal-yellow text-sm\">\n            💡 Vihje: ${problem.hint}\n          </div>\n        </div>\n      ` : ''}\n\n      <div class=\"flex justify-between items-center mt-6 text-sm\">\n        <button class=\"terminal-button px-4 py-2\" id=\"reset-btn\">reset</button>\n        ${isCorrect \n          ? '<button class=\"terminal-button px-4 py-2\" id=\"next-btn\">next →</button>'\n          : `<button class=\"terminal-button px-4 py-2\" id=\"hint-btn\">${showHint ? 'piilota vihje' : 'vihje ?'}</button>`\n        }\n      </div>\n    </div>\n  `;\n}","import './style.css';\nimport { Problem, GameState } from './types';\nimport { PROBLEMS } from './data/problems';\nimport { createProblemDisplay } from './components/ProblemDisplay';\nimport { createFeedbackDisplay } from './components/FeedbackDisplay';\n\nclass GameApp {\n  private gameState: GameState;\n  private currentProblem: Problem;\n  private appElement: HTMLElement;\n\n  constructor() {\n    this.appElement = document.querySelector<HTMLDivElement>('#app')!;\n    this.gameState = {\n      currentProblemIndex: 0,\n      totalProblems: PROBLEMS.length,\n      score: 0,\n      selectedAnswer: null,\n      showExplanation: false,\n      showHint: false,\n      gamePhase: 'problem'\n    };\n    this.currentProblem = PROBLEMS[0];\n    this.init();\n  }\n\n  private init() {\n    this.loadGameState();\n    this.render();\n    this.attachEventListeners();\n  }\n\n  private loadGameState() {\n    const saved = localStorage.getItem('cipher-game-state');\n    if (saved) {\n      const savedState = JSON.parse(saved);\n      this.gameState = { ...this.gameState, ...savedState };\n      this.currentProblem = PROBLEMS[this.gameState.currentProblemIndex];\n    }\n  }\n\n  private saveGameState() {\n    localStorage.setItem('cipher-game-state', JSON.stringify(this.gameState));\n  }\n\n  private render() {\n    let html = '';\n    \n    switch (this.gameState.gamePhase) {\n      case 'problem':\n        html = createProblemDisplay(this.currentProblem, this.gameState);\n        break;\n      case 'feedback':\n        const isCorrect = this.gameState.selectedAnswer === this.currentProblem.correctAnswer;\n        html = createFeedbackDisplay(this.currentProblem, this.gameState, isCorrect);\n        break;\n      case 'explanation':\n        // TODO: Implement explanation view\n        html = '<div class=\"text-center p-8\">Explanation view coming soon...</div>';\n        break;\n      case 'complete':\n        html = '<div class=\"text-center p-8\">Game complete! 🎉</div>';\n        break;\n    }\n    \n    this.appElement.innerHTML = html;\n    this.attachEventListeners();\n  }\n\n  private attachEventListeners() {\n    // Answer selection\n    const answerButtons = this.appElement.querySelectorAll('[data-answer]');\n    answerButtons.forEach(button => {\n      button.addEventListener('click', (e) => {\n        const target = e.target as HTMLButtonElement;\n        const answer = target.dataset.answer;\n        if (answer) {\n          this.handleAnswerSelection(answer);\n        }\n      });\n    });\n\n    // Next button\n    const nextBtn = this.appElement.querySelector('#next-btn');\n    if (nextBtn) {\n      nextBtn.addEventListener('click', () => {\n        this.handleNextProblem();\n      });\n    }\n\n    // Reset button\n    const resetBtn = this.appElement.querySelector('#reset-btn');\n    if (resetBtn) {\n      resetBtn.addEventListener('click', () => {\n        this.reset();\n      });\n    }\n\n    // Hint button\n    const hintBtn = this.appElement.querySelector('#hint-btn');\n    if (hintBtn) {\n      hintBtn.addEventListener('click', () => {\n        this.toggleHint();\n      });\n    }\n  }\n\n  private handleAnswerSelection(answer: string) {\n    this.gameState.selectedAnswer = answer;\n    const isCorrect = answer === this.currentProblem.correctAnswer;\n    \n    if (isCorrect) {\n      this.gameState.score++;\n      this.gameState.gamePhase = 'feedback';\n    } else {\n      this.gameState.gamePhase = 'feedback';\n    }\n    \n    this.saveGameState();\n    this.render();\n  }\n\n  private handleNextProblem() {\n    if (this.gameState.currentProblemIndex < PROBLEMS.length - 1) {\n      this.gameState.currentProblemIndex++;\n      this.currentProblem = PROBLEMS[this.gameState.currentProblemIndex];\n      this.gameState.gamePhase = 'problem';\n      this.gameState.selectedAnswer = null;\n      this.gameState.showHint = false; // Reset hint for new problem\n    } else {\n      this.gameState.gamePhase = 'complete';\n    }\n    \n    this.saveGameState();\n    this.render();\n  }\n\n  private toggleHint() {\n    this.gameState.showHint = !this.gameState.showHint;\n    this.saveGameState();\n    this.render();\n  }\n\n  // Public method to reset game\n  reset() {\n    this.gameState = {\n      currentProblemIndex: 0,\n      totalProblems: PROBLEMS.length,\n      score: 0,\n      selectedAnswer: null,\n      showExplanation: false,\n      showHint: false,\n      gamePhase: 'problem'\n    };\n    this.currentProblem = PROBLEMS[0];\n    this.saveGameState();\n    this.render();\n  }\n}\n\n// Initialize the game\nconst game = new GameApp();\n\n// Make reset available globally for debugging\n(window as any).resetGame = () => game.reset();"],"names":["PROBLEMS","createProblemDisplay","problem","gameState","currentProblemIndex","totalProblems","showHint","allAnswers","answer","index","createFeedbackDisplay","isCorrect","selectedAnswer","feedbackColor","feedbackIcon","feedbackText","buttonClass","GameApp","__publicField","saved","savedState","html","button","e","nextBtn","resetBtn","hintBtn","game"],"mappings":"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"}